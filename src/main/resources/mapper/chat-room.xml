<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kcc.trioffice.domain.chat_room.mapper.ChatRoomMapper">

    <insert id="saveChatRoom">
      <selectKey keyProperty="chatRoomCreate.chatRoomId" resultType="long" order="BEFORE">
          SELECT SEQ_CHAT_ROOM.NEXTVAL FROM DUAL
      </selectKey>

      INSERT INTO chat_room (chat_room_id, name, writer, write_dt, modifier, modified_dt, is_deleted)
        VALUES (#{chatRoomCreate.chatRoomId}, #{chatRoomCreate.chatRoomName}, #{writer}, SYSDATE, #{writer}, SYSDATE, 0)
    </insert>

    <select id="getChatRoomListByEmployeeId" parameterType="long" resultType="com.kcc.trioffice.domain.chat_room.dto.response.ChatRoomInfo">
      SELECT
        cr.chat_room_id
        , cr.name AS chatRoomName
        , pe.chat_room_profile_url AS chatRoomProfileImageUrl
        , cm.contents AS lastMessage
        , cm.write_dt AS lastMessageTime
        , COUNT(CASE WHEN cs.is_read = 0 THEN 1 END) AS unreadMessageCount
        , (
            SELECT COUNT(1)
              FROM participation_employee pe2
              WHERE pe2.chat_room_id = cr.chat_room_id
          ) AS participantCount
        , pe.is_favorited
        FROM chat_room cr
        INNER JOIN participation_employee pe
          ON cr.chat_room_id = pe.chat_room_id
            AND pe.is_deleted = 0
        LEFT JOIN chat cm
          ON cr.last_chat_id = cm.chat_id
        LEFT JOIN chat_status cs
          ON cr.chat_room_id = cs.chat_room_id
            AND cs.employee_id = #{employeeId}
            AND cs.is_read = 0
        WHERE pe.employee_id = #{employeeId}
          AND cr.is_deleted = 0
        GROUP BY
          cr.chat_room_id
          , cr.name
          , pe.chat_room_profile_url
          , cm.contents
          , cm.write_dt
          , pe.is_favorited
        ORDER BY
          cm.write_dt DESC
    </select>

    <select id="getChatRoomInfo" parameterType="map" resultType="ChatRoomDetailInfo">
      SELECT
        cr.chat_room_id
        , cr.name AS chatRoomName
        , pe.chat_room_profile_url AS chatRoomProfileImageUrl
        , (
          SELECT COUNT(*)
            FROM participation_employee pe2
            WHERE pe2.chat_room_id = cr.chat_room_id
              AND pe2.is_deleted = 0
          ) AS participantCount
        FROM chat_room cr
          JOIN participation_employee pe
            ON cr.chat_room_id = pe.chat_room_id
            AND pe.is_deleted = 0
        WHERE
          cr.chat_room_id = #{chatRoomId}
            AND pe.employee_id = #{employeeId}
    </select>

    <select id="getChatInfoByPage" parameterType="map" resultType="com.kcc.trioffice.domain.chat_room.dto.response.ChatInfo">
      <![CDATA[
      SELECT *
        FROM (
          SELECT
            inner_query.*, ROWNUM AS rnum
            FROM (
              SELECT
                c.chat_id
                , CASE
                    WHEN c.chat_type = 5 THEN af.file_url     -- 이미지: file_url 사용
                    WHEN c.chat_type = 3 THEN af.file_name    -- 파일: file_name 사용
                    ELSE c.contents                           -- 기타: contents 사용
                    END AS chatContents
                , c.chat_type
                , c.writer AS senderId
                , c.write_dt AS chatTime
                , e.name AS senderName
                , e.profile_url AS senderProfileUrl
                -- 이모티콘 개수 계산
                , (
                    SELECT COUNT(*)
                      FROM chat_status cs
                      WHERE cs.chat_id = c.chat_id
                        AND cs.emoticon_type = 1
                        AND cs.is_emoticon = 1
                        AND cs.is_deleted = 0
                   ) AS checkEmoticonCount
                , (
                    SELECT COUNT(*)
                      FROM chat_status cs
                      WHERE cs.chat_id = c.chat_id
                        AND cs.emoticon_type = 2
                        AND cs.is_emoticon = 1
                        AND cs.is_deleted = 0
                  ) AS heartEmoticonCount
                , (
                    SELECT COUNT(*)
                      FROM chat_status cs
                      WHERE cs.chat_id = c.chat_id
                        AND cs.emoticon_type = 3
                        AND cs.is_emoticon = 1
                        AND cs.is_deleted = 0
                  ) AS thumbsUpEmoticonCount
                , (
                    SELECT COUNT(*)
                      FROM chat_status cs
                      WHERE cs.chat_id = c.chat_id
                        AND cs.emoticon_type = 4
                        AND cs.is_emoticon = 1
                        AND cs.is_deleted = 0) AS smileEmoticonCount
                , (
                    SELECT COUNT(*)
                      FROM chat_status cs
                      WHERE cs.chat_id = c.chat_id
                        AND cs.emoticon_type = 5
                        AND cs.is_emoticon = 1
                        AND cs.is_deleted = 0) AS sadEmoticonCount
                -- 현재 사용자의 이모티콘 클릭 여부
                , (
                     SELECT MAX(CASE WHEN cs.emoticon_type = 1 THEN 1 ELSE 0 END)
                       FROM chat_status cs
                       WHERE cs.chat_id = c.chat_id
                         AND cs.employee_id = #{employeeId}
                         AND cs.is_emoticon = 1
                         AND cs.is_deleted = 0
                   ) AS isClickedCheckEmoticon
                , (
                     SELECT MAX(CASE WHEN cs.emoticon_type = 2 THEN 1 ELSE 0 END)
                       FROM chat_status cs
                       WHERE cs.chat_id = c.chat_id
                         AND cs.employee_id = #{employeeId}
                         AND cs.is_emoticon = 1
                         AND cs.is_deleted = 0
                   ) AS isClickedHeartEmoticon
                , (
                     SELECT MAX(CASE WHEN cs.emoticon_type = 3 THEN 1 ELSE 0 END)
                       FROM chat_status cs
                       WHERE cs.chat_id = c.chat_id
                         AND cs.employee_id = #{employeeId}
                         AND cs.is_emoticon = 1
                         AND cs.is_deleted = 0
                   ) AS isClickedThumbsUpEmoticon
                , (
                     SELECT MAX(CASE WHEN cs.emoticon_type = 4 THEN 1 ELSE 0 END)
                       FROM chat_status cs
                       WHERE cs.chat_id = c.chat_id
                         AND cs.employee_id = #{employeeId}
                         AND cs.is_emoticon = 1
                         AND cs.is_deleted = 0
                   ) AS isClickedSmileEmoticon
                , (
                     SELECT MAX(CASE WHEN cs.emoticon_type = 5 THEN 1 ELSE 0 END)
                       FROM chat_status cs
                       WHERE cs.chat_id = c.chat_id
                         AND cs.employee_id = #{employeeId}
                         AND cs.is_emoticon = 1
                         AND cs.is_deleted = 0
                   ) AS isClickedSadEmoticon
                    -- 참여자 수 및 읽지 않은 메시지 수
                , (
                     SELECT COUNT(*)
                       FROM participation_employee pe
                       WHERE pe.chat_room_id = c.chatroom_id
                         AND pe.is_deleted = 0
                         AND pe.write_dt <= c.write_dt
                   ) AS participantCount
                , (
                     (
                       SELECT COUNT(*)
                         FROM participation_employee pe
                         WHERE pe.chat_room_id = c.chatroom_id
                           AND pe.is_deleted = 0
                           AND pe.write_dt <= c.write_dt
                     ) -
                     (
                       SELECT COUNT(DISTINCT cs.employee_id)
                         FROM chat_status cs
                         WHERE cs.chat_id = c.chat_id
                           AND cs.is_read = 1
                           AND cs.is_deleted = 0
                     )
                   ) AS unreadMessageCount
                    -- 태그 집계
                , (
                     SELECT LISTAGG(t.name, ',') WITHIN GROUP (ORDER BY t.name)
                       FROM attached_file af2
                       JOIN tag t
                         ON af2.file_id = t.file_id
                           AND t.is_deleted = 0
                       WHERE af2.chat_id = c.chat_id
                         AND af2.is_deleted = 0
                  ) AS tags
                , c.is_deleted AS isDeleted
                FROM chat c
                JOIN employee e
                  ON c.writer = e.employee_id
                LEFT JOIN attached_file af
                  ON c.chat_id = af.chat_id AND af.is_deleted = 0
                WHERE c.chatroom_id = #{chatRoomId}
                  AND c.write_dt >=
                    (
                      SELECT pe.write_dt
                        FROM participation_employee pe
                        WHERE pe.chat_room_id = c.chatroom_id
                          AND pe.employee_id = #{employeeId}
                          AND pe.is_deleted = 0
                    )
                  AND e.is_deleted = 0
                ORDER BY c.write_dt DESC
                ) inner_query
            WHERE ROWNUM <= #{offset} + #{limit}
             )
        WHERE rnum > #{offset}
        ORDER BY chatTime DESC
      ]]>

    </select>

    <update id="updateChatRoomLastMessage" parameterType="map">
      UPDATE chat_room
        SET last_chat_id = #{chatId}
        WHERE chat_room_id = #{chatRoomId}
    </update>

    <delete id="chatMessageInfoAndPtptEmp" parameterType="long">
      UPDATE chat_room
        SET is_deleted = 1
        WHERE chat_room_id = #{chatRoomId}
    </delete>

  <select id="getFavoriteChatRooms" parameterType="long" resultType="com.kcc.trioffice.domain.chat_room.dto.response.ChatRoomInfo">
    SELECT
      cr.chat_room_id
      , cr.name AS chatRoomName
      , pe.chat_room_profile_url AS chatRoomProfileImageUrl
      , cm.contents AS lastMessage
      , cm.write_dt AS lastMessageTime
      , COUNT(CASE WHEN cs.is_read = 0 THEN 1 END) AS unreadMessageCount
      , (
          SELECT COUNT(1)
          FROM participation_employee pe2
          WHERE pe2.chat_room_id = cr.chat_room_id
        ) AS participantCount
      , pe.is_favorited
      FROM chat_room cr
      INNER JOIN participation_employee pe
        ON cr.chat_room_id = pe.chat_room_id
          AND pe.is_deleted = 0
      LEFT JOIN chat cm
        ON cr.last_chat_id = cm.chat_id
      LEFT JOIN chat_status cs
        ON cr.chat_room_id = cs.chat_room_id
        AND cs.employee_id = #{employeeId}
        AND cs.is_read = 0
      WHERE pe.employee_id = #{employeeId}
        AND pe.is_favorited = 1
        AND cr.is_deleted = 0
        AND pe.is_deleted = 0
      GROUP BY
        cr.chat_room_id
        , cr.name
        , pe.chat_room_profile_url
        , cm.contents
        , cm.write_dt
        , pe.is_favorited
      ORDER BY cm.write_dt DESC
  </select>


</mapper>
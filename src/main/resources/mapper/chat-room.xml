<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kcc.trioffice.domain.chat_room.mapper.ChatRoomMapper">

    <insert id="saveChatRoom">
        <selectKey keyProperty="chatRoomCreate.chatRoomId" resultType="long" order="BEFORE">
            SELECT SEQ_CHAT_ROOM.NEXTVAL FROM DUAL
        </selectKey>

        INSERT INTO chat_room (chat_room_id, name, writer, write_dt, modifier, modified_dt, is_deleted)
            VALUES (#{chatRoomCreate.chatRoomId}, #{chatRoomCreate.chatRoomName}, #{writer}, SYSDATE, #{writer}, SYSDATE, 0)
    </insert>

    <select id="getChatRoomListByEmployeeId" parameterType="long" resultType="com.kcc.trioffice.domain.chat_room.dto.response.ChatRoomInfo">
        SELECT
            cr.chat_room_id AS chatRoomId
            ,cr.name AS chatRoomName
            ,pe.chat_room_profile_url AS chatRoomProfileImageUrl
            ,cm.contents AS lastMessage
            ,cm.write_dt AS lastMessageTime
            ,COUNT(CASE WHEN cs.is_read = 0 THEN 1 END) AS unreadMessageCount
            ,(
                SELECT COUNT(1)
                FROM participation_employee pe2
                WHERE pe2.chat_room_id = cr.chat_room_id
            ) AS participantCount
        FROM
            chat_room cr
                INNER JOIN participation_employee pe
                    ON cr.chat_room_id = pe.chat_room_id
                       AND pe.is_deleted = 0
                LEFT JOIN chat cm
                    ON cr.last_chat_id = cm.chat_id
                LEFT JOIN chat_status cs
                    ON cr.chat_room_id = cs.chat_room_id
                AND cs.employee_id = #{employeeId}
                AND cs.is_read = 0
        WHERE
            pe.employee_id = #{employeeId}
            AND cr.is_deleted = 0
        GROUP BY
            cr.chat_room_id,
            cr.name,
            pe.chat_room_profile_url,
            cm.contents,
            cm.write_dt
        ORDER BY
            cm.write_dt DESC
    </select>

    <select id="getChatRoomInfo" parameterType="map" resultType="ChatRoomDetailInfo">
        SELECT
            cr.chat_room_id AS chatRoomId,
            cr.name AS chatRoomName,
            pe.chat_room_profile_url AS chatRoomProfileImageUrl,
            (
                SELECT COUNT(*)
                FROM participation_employee pe2
                WHERE pe2.chat_room_id = cr.chat_room_id
                    AND pe2.is_deleted = 0
            ) AS participantCount
            FROM chat_room cr
                JOIN participation_employee pe
                    ON cr.chat_room_id = pe.chat_room_id
                       AND pe.is_deleted = 0
            WHERE
                cr.chat_room_id = #{chatRoomId} and pe.employee_id = #{employeeId}
    </select>

    <select id="getChatInfoByPage" parameterType="map" resultType="com.kcc.trioffice.domain.chat_room.dto.response.ChatInfo">
         <![CDATA[
        SELECT * FROM (
          SELECT
              inner_query.*, ROWNUM AS rnum
          FROM (
            SELECT
               c.chat_id AS chatId,
               -- Adjust chatContents based on chatType
               CASE
                   WHEN c.chat_type = 5 THEN af.file_url     -- Image: use file_url
                   WHEN c.chat_type = 3 THEN af.file_name    -- File: use file_name
                   ELSE c.contents                           -- Other: use contents
                   END AS chatContents,
               c.chat_type AS chatType,
               c.writer AS senderId,
               c.write_dt AS chatTime,
               e.name AS senderName,
               e.profile_url AS senderProfileUrl,
               -- Emoticon counts
               SUM(CASE WHEN cs.emoticon_type = 1 AND cs.is_emoticon = 1 THEN 1 ELSE 0 END) AS checkEmoticonCount,
               SUM(CASE WHEN cs.emoticon_type = 2 AND cs.is_emoticon = 1 THEN 1 ELSE 0 END) AS heartEmoticonCount,
               SUM(CASE WHEN cs.emoticon_type = 3 AND cs.is_emoticon = 1 THEN 1 ELSE 0 END) AS thumbsUpEmoticonCount,
               SUM(CASE WHEN cs.emoticon_type = 4 AND cs.is_emoticon = 1 THEN 1 ELSE 0 END) AS smileEmoticonCount,
               SUM(CASE WHEN cs.emoticon_type = 5 AND cs.is_emoticon = 1 THEN 1 ELSE 0 END) AS sadEmoticonCount,
               -- Current user's emoticon click status
               MAX(CASE WHEN cs.emoticon_type = 1 AND cs.employee_id = #{employeeId} AND cs.is_emoticon = 1 THEN 1 ELSE 0 END) AS isClickedCheckEmoticon,
               MAX(CASE WHEN cs.emoticon_type = 2 AND cs.employee_id = #{employeeId} AND cs.is_emoticon = 1 THEN 1 ELSE 0 END) AS isClickedHeartEmoticon,
               MAX(CASE WHEN cs.emoticon_type = 3 AND cs.employee_id = #{employeeId} AND cs.is_emoticon = 1 THEN 1 ELSE 0 END) AS isClickedThumbsUpEmoticon,
               MAX(CASE WHEN cs.emoticon_type = 4 AND cs.employee_id = #{employeeId} AND cs.is_emoticon = 1 THEN 1 ELSE 0 END) AS isClickedSmileEmoticon,
               MAX(CASE WHEN cs.emoticon_type = 5 AND cs.employee_id = #{employeeId} AND cs.is_emoticon = 1 THEN 1 ELSE 0 END) AS isClickedSadEmoticon,
               -- Participant count and unread message count
               (SELECT COUNT(*) FROM participation_employee pe WHERE pe.chat_room_id = c.chatroom_id AND pe.is_deleted = 0 AND pe.write_dt <= c.write_dt) AS participantCount,
               ((SELECT COUNT(*) FROM participation_employee pe WHERE pe.chat_room_id = c.chatroom_id AND pe.is_deleted = 0 AND pe.write_dt <= c.write_dt) -
                COUNT(DISTINCT CASE WHEN cs.is_read = 1 THEN cs.employee_id END)) AS unreadMessageCount,
               -- Aggregate tags
               LISTAGG(t.name, ',') WITHIN GROUP (ORDER BY t.name) AS tags
            FROM chat c
               JOIN employee e
            ON c.writer = e.employee_id
               LEFT JOIN chat_status cs
               ON c.chat_id = cs.chat_id AND cs.is_deleted = 0
               LEFT JOIN participation_employee pe
               ON pe.chat_room_id = c.chatroom_id AND pe.employee_id = #{employeeId} AND pe.is_deleted = 0
               LEFT JOIN attached_file af
               ON c.chat_id = af.chat_id AND af.is_deleted = 0
               LEFT JOIN tag t
               ON af.file_id = t.file_id AND t.is_deleted = 0
            WHERE c.chatroom_id = #{chatRoomId}
             AND c.write_dt >= pe.write_dt
             AND c.is_deleted = 0
             AND e.is_deleted = 0
            GROUP BY c.chat_id, c.contents, c.chat_type, c.writer, c.write_dt, e.name, e.profile_url, c.chatroom_id, af.file_url, af.file_name
            ORDER BY c.write_dt DESC
            ) inner_query
          WHERE ROWNUM <= #{offset} + #{limit}
        )
        WHERE rnum > #{offset}
        ORDER BY chatTime DESC
        ]]>

    </select>

    <update id="updateChatRoomLastMessage" parameterType="map">
        UPDATE chat_room
            SET last_chat_id = #{chatId}
            WHERE chat_room_id = #{chatRoomId}
    </update>

    <delete id="chatMessageInfoAndPtptEmp" parameterType="long">
        UPDATE chat_room
            SET is_deleted = 1
            WHERE chat_room_id = #{chatRoomId}
    </delete>

</mapper>
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kcc.trioffice.domain.department.mapper.DepartmentMapper">

    <resultMap id="DepartmentResultMap" type="com.kcc.trioffice.domain.department.dto.response.Department">
        <id property="deptId" column="deptId"/>
        <result property="departmentName" column="departmentName"/>
        <result property="upperDeptId" column="upperDeptId"/>
        <result property="deptLevel" column="deptLevel"/>

        <!-- 하위 부서 매핑 -->
        <collection property="subDepartments" ofType="com.kcc.trioffice.domain.department.dto.response.Department" select="getSubDepartmentsByParentId" column="deptId"/>

        <!-- 직원 매핑 -->
        <collection property="employees" ofType="com.kcc.trioffice.domain.employee.dto.response.EmployeeInfo" select="getEmployeesByDeptId" column="deptId"/>
    </resultMap>

    <select id="getDepartmentDetails" resultMap="DepartmentResultMap">
      SELECT
        LEVEL AS deptLevel
        , d.dept_id AS deptId
        , d.name AS departmentName
        , d.upper_dept_id AS upperDeptId
        FROM department d
        WHERE d.is_deleted = 0
        START WITH d.upper_dept_id IS NULL
        CONNECT BY PRIOR d.dept_id = d.upper_dept_id
        ORDER BY d.dept_id
    </select>

    <!-- 하위 부서 조회 쿼리 수정 -->
    <select id="getSubDepartmentsByParentId" resultType="com.kcc.trioffice.domain.department.dto.response.Department">
      SELECT
        d.dept_id AS deptId
        , d.name AS departmentName
        , d.upper_dept_id AS upperDeptId
        , LEVEL AS deptLevel
        FROM department d
        WHERE d.upper_dept_id = #{parentId}
        AND d.is_deleted = 0
        START WITH d.upper_dept_id = #{parentId}
        CONNECT BY PRIOR d.dept_id = d.upper_dept_id
        ORDER BY d.dept_id
    </select>

    <!-- 직원 조회 쿼리 -->
    <select id="getEmployeesByDeptId" resultType="com.kcc.trioffice.domain.employee.dto.response.EmployeeInfo">
        SELECT e.employee_id AS employeeId
               , e.name AS name
               , e.profile_url
               , e.position AS position
          FROM employee e
         WHERE e.dept_id = #{deptId}
           AND e.is_deleted = 0
    </select>

    <!-- 부서추가 -->
    <insert id="insertDepartment" parameterType="com.kcc.trioffice.domain.department.dto.response.Department">
        INSERT INTO department (
        dept_id,
        name,
        upper_dept_id,
        company_id,
        writer,
        write_dt,
        modifier,
        modified_dt,
        is_deleted
        ) VALUES (
        seq_department.nextval,
        #{departmentName},
        #{upperDeptId},
        1,
        1,
        SYSTIMESTAMP,
        1,
        SYSTIMESTAMP,
        0
        )
    </insert>

    <insert id="insertTopDepartment" parameterType="com.kcc.trioffice.domain.department.dto.response.Department">
        INSERT INTO department (
        dept_id,
        name,
        company_id,
        writer,
        write_dt,
        modifier,
        modified_dt,
        is_deleted
        ) VALUES (
        seq_department.nextval,
        #{departmentName},
        1,
        1,
        SYSTIMESTAMP,
        1,
        SYSTIMESTAMP,
        0
        )
    </insert>

    <!-- 부서 수정 쿼리 -->
    <update id="updateDepartment" parameterType="com.kcc.trioffice.domain.department.dto.response.Department">
      UPDATE department
        SET name = #{departmentName}
        , upper_dept_id = <if test="upperDeptId != null">#{upperDeptId}</if>
         <if test="upperDeptId == null">NULL</if>
        , dept_level = #{deptLevel}
        WHERE dept_id = #{deptId}
    </update>

    <!-- 부서 삭제 쿼리 -->
    <update id="deleteDepartment" parameterType="com.kcc.trioffice.domain.department.dto.response.Department">
        UPDATE department
        SET is_deleted = 1
        WHERE dept_id = #{deptId}
    </update>

    <select id="findDepartmentById" parameterType="Long" resultType="com.kcc.trioffice.domain.department.dto.response.Department">
        SELECT
        dept_id AS deptId,
        name AS departmentName,
        upper_dept_id AS upperDeptId,
        write_dt AS writeDt
        FROM department
        WHERE dept_id = #{deptId}
        AND is_deleted = 0
    </select>

    <!-- 부서id로 하위부서 출력하는 쿼리문 -->
    <select id="findSubDepartments" parameterType="Long" resultType="com.kcc.trioffice.domain.department.dto.response.Department">
        SELECT
        dept_id AS deptId,
        name AS departmentName,
        upper_dept_id AS upperDeptId,
        write_dt AS writeDt
        FROM
        department
        WHERE
        upper_dept_id = #{deptId}
        AND is_deleted = 0
    </select>

    <select id="getDepartments" resultType="com.kcc.trioffice.domain.department.dto.response.DepartmentInfo">
      SELECT
        d.dept_id
        , d.name
        , d.upper_dept_id
        , d.dept_order
        FROM department d
        WHERE d.company_id = #{companyId}
          AND d.is_deleted = 0
        ORDER BY d.dept_order
    </select>

</mapper>
